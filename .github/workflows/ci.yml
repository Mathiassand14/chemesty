name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.13", "3.12", "3.11"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.11"
          - os: macos-latest
            python-version: "3.11"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.0
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Run tests with pytest
      run: |
        poetry run pytest --cov=chemesty --cov-report=xml --cov-report=term-missing -v

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.0
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev

    - name: Run flake8
      run: |
        poetry run flake8 chemesty tests --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 chemesty tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run black (check only)
      run: |
        poetry run black --check --diff chemesty tests

    - name: Run isort (check only)
      run: |
        poetry run isort --check-only --diff chemesty tests

  type-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.0
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev

    - name: Run mypy
      run: |
        poetry run mypy chemesty --ignore-missing-imports --no-strict-optional

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.0
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev

    - name: Run safety check
      run: |
        poetry run safety check --json || true

    - name: Run bandit security linter
      run: |
        poetry run bandit -r chemesty -f json || true

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.0
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev

    - name: Build documentation
      run: |
        cd docs
        poetry run make html

    - name: Check documentation links
      run: |
        cd docs
        poetry run make linkcheck || true

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.0
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev

    - name: Run performance benchmarks
      run: |
        if [ -d "benchmarks" ]; then
          poetry run python -m pytest benchmarks/ --benchmark-only --benchmark-json=benchmark.json || true
        fi

    - name: Store benchmark result
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: false

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.0
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Check for dependency updates
      run: |
        poetry show --outdated || true

    - name: Export requirements for vulnerability scanning
      run: |
        poetry export -f requirements.txt --output requirements.txt --with dev

    - name: Run pip-audit
      run: |
        pip install pip-audit
        pip-audit --requirement requirements.txt --format=json --output=audit.json || true

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, lint, type-check]
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.0
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev

    - name: Run integration tests
      run: |
        poetry run pytest tests/integration/ -v --tb=short || true

    - name: Test package installation
      run: |
        poetry build
        pip install dist/*.whl
        python -c "import chemesty; print('Package installed successfully')"

  notify:
    runs-on: ubuntu-latest
    needs: [test, lint, type-check, security, docs]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.lint.result == 'success' && needs.type-check.result == 'success' }}
      run: |
        echo "✅ All CI checks passed successfully!"

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.lint.result == 'failure' || needs.type-check.result == 'failure' }}
      run: |
        echo "❌ Some CI checks failed. Please review the logs."
        exit 1